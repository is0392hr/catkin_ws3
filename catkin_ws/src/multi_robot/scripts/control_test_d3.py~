#!/usr/bin/env python

import os
import sys
import tempfile
import csv
import tf
import rospy
import math
import message_filters
from std_msgs.msg import String
from gazebo_msgs.msg import ModelStates
from gazebo_msgs.msg import ModelState
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Point, Quaternion
from geometry_msgs.msg import Twist, Vector3
import numpy as np

import cv2, cv_bridge
from sensor_msgs.msg import Image, CameraInfo

def calc_attractive_potential(x, y, tx, ty):
    dist = 0.5*math.sqrt((x-tx)**2 + (y-ty)**2)
    if(dist<=3):
        return 0, 0
    else: 
        return dist*(tx-x), dist*(ty-y)

def calc_repulsive_potential(x1, y1, x2, y2):
    dist = math.sqrt((x1-x2)**2 + (y1-y2)**2)
    if(dist<=2.5):
        force_x = 3*(math.sqrt((x1-x2)**2))-7.5 #dist*gain
        force_y = 3*(math.sqrt((y1-y2)**2))-7.5
        if(x2>x1):
	    force_x = -force_x
        if(y2>y1):
	    force_y = -force_y
    else:
	force_x=0.0 
	force_y=0.0

    return force_x, force_y

class Follower:
    def __init__(self):
        self.pos_sub = rospy.Subscriber('/gazebo/model_states', ModelStates, self.callback)
        self.cmd_vel_pub = rospy.Publisher('drone03/cmd_vel',Twist, queue_size=10)
        self.twist = Twist()
    

    def callback(self, data):
        '''
        data1 = ModelState()
        data1.model_name = 'drone03'
        drone = data1.pose
        drone_vel = data1.twist
        posX = drone.position.x
        posY = drone.position.y
        posZ = drone.position.z
        velX = drone_vel.linear.x
        velY = drone_vel.linear.y

        data2 = ModelState()
        data2.model_name = 'drone01'
        drone01 = data2.pose
        drone01_vel = data2.twist
        d01_posX = drone01.position.x
        d01_posY = drone01.position.y
        d01_posZ = drone01.position.z
        d01_velX = drone01_vel.linear.x
        d01_velY = drone01_vel.linear.y

        data3 = ModelState()
        data3.model_name = 'drone02'
        drone02 = data3.pose
        drone02_vel = data3.twist
        d02_posX = drone02.position.x
        d02_posY = drone02.position.y
        d02_posZ = drone02.position.z
        d02_velX = drone02_vel.linear.x
        d02_velY = drone02_vel.linear.y

        '''
        drone = data.pose[10]
        drone_vel = data.twist[10]
        posX = drone.position.x
        posY = drone.position.y
        posZ = drone.position.z
        velX = drone_vel.linear.x
        velY = drone_vel.linear.y


        drone01 = data.pose[12]
        drone01_vel = data.twist[12]
        d01_posX = drone01.position.x
        d01_posY = drone01.position.y
        d01_posZ = drone01.position.z

        drone02 = data.pose[13]
        drone02_vel = data.twist[13]
        d02_posX = drone02.position.x
        d02_posY = drone02.position.y
        d02_posZ = drone02.position.z
        
        pub = self.cmd_vel_pub
        vel_msg_z = Twist()

        cX = float((11 + d01_posX + d02_posX)/3)
        cY = float((11 + d01_posY + d02_posY)/3)
        

        calc_odom = (Vector3(-3*(posX-cX),-3*(posY-cY),-3*(posZ-5)))
        pub.publish(Twist(calc_odom, Vector3(0,0,0)))
        
        print('position control now')
        rospy.Rate(1).sleep
    

def listener():
    rospy.init_node('d_3')
    follower = Follower()
    rospy.spin()

if __name__ == '__main__':
    try:
        listener()
    except rospy.ROSInterruptException:
        pass
# END ALL
